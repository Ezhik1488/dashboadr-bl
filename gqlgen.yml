# Где находятся все файлы схем? Поддерживаются глобальные шаблоны, например, src/**/*.graphqls
schema:
  - graph/*.graphqls
# Куда должен быть помещен сгенерированный серверный код?
exec:
  package: graph
  layout: single-file # Единственный другой вариант — "follow-schema", т.е. многофайловый.
  # Только для макета single-file:
  filename: graph/generated.go
  # Только для макета follow-schema:
  # dir: graph
  # filename_template: "{name}.generated.go"
  # Необязательно: Максимальное количество горутин в конкурентности для использования дочерних резолверов (по умолчанию: неограниченно)
  # worker_limit: 1000
# Раскомментируйте, чтобы включить федерацию
# federation:
#   filename: graph/federation.go
#   package: graph
#   version: 2
#   options:
#     computed_requires: true
# Где должны храниться любые сгенерированные модели?
model:
  filename: graph/model/models_gen.go
  package: model
  # Необязательно: Укажите путь к новому шаблону gotpl для генерации моделей
  # model_template: [your/path/model.gotpl]
# Где должны храниться реализации резолверов?
resolver:
  package: graph
  layout: follow-schema # Единственный другой вариант — "single-file."
  # Только для макета single-file:
  # filename: graph/resolver.go
  # Только для макета follow-schema:
  dir: graph
  filename_template: "{name}.resolvers.go"
  # Необязательно: Включите, чтобы не генерировать комментарии-шаблоны над резолверами
  # omit_template_comment: false
  # Необязательно: Укажите путь к новому шаблону gotpl для генерации резолверов
  # resolver_template: [your/path/resolver.gotpl]
  # Необязательно: Включите, чтобы избежать перезаписи существующих резолверов при генерации
  #preserve_resolver: true
# Необязательно: Включите использование тегов ` + "`" + `gqlgen:"fieldName"` + "`" + ` в ваших моделях
  #struct_tag: json
# Необязательно: Включите, чтобы использовать []Thing вместо []*Thing
  #omit_slice_element_pointers: true
# Необязательно: Включите, чтобы опустить методы Is<Name>() в интерфейсах и объединениях
# omit_interface_checks: true
# Необязательно: Включите, чтобы пропустить генерацию содержимого структуры ComplexityRoot и функции Complexity
# omit_complexity: false
# Необязательно: Включите, чтобы не генерировать никаких комментариев в начале файла в сгенерированных файлах
# omit_gqlgen_file_notice: false
# Необязательно: Включите, чтобы исключить версию gqlgen из уведомления в сгенерированном файле. Нет эффекта, если `omit_gqlgen_file_notice` имеет значение true.
# omit_gqlgen_version_in_file_notice: false
# Необязательно: Включите, чтобы исключить корневые модели, такие как Query и Mutation, из сгенерированного файла моделей.
# omit_root_models: false
# Необязательно: Включите, чтобы исключить поля резолвера из сгенерированного файла моделей.
# omit_resolver_fields: false
# Необязательно: Выключите, чтобы сделать поля структурных типов без использования указателей
# Например, type Thing struct { FieldA OtherThing } вместо { FieldA *OtherThing }
# struct_fields_always_pointers: true
# Необязательно: Выключите, чтобы заставить резолверы возвращать значения вместо указателей для структур
# resolvers_always_return_pointers: true
# Необязательно: Включите, чтобы возвращать указатели вместо значений в unmarshalInput
# return_pointers_in_unmarshalinput: false
# Необязательно: Обернуть допустимые поля ввода с помощью Omittable
# nullable_input_omittable: true
# Необязательно: Установите, чтобы ускорить время генерации, не выполняя финальный проход валидации.
# skip_validation: true
# Необязательно: Установите, чтобы пропустить выполнение `go mod tidy` при генерации серверного кода
# skip_mod_tidy: true
# Необязательно: если установлено значение true, директивы аргументов,
# декорирующие поле с нулевым значением, все равно будут вызываться.
#
# Это позволяет директивам аргументов не только изменять
# значения аргументов, но и устанавливать их даже если они равны null.
call_argument_directives_with_null: true
# Необязательно: установите теги сборки, которые будут использоваться для загрузки пакетов
# go_build_tags:
#  - private
#  - enterprise
# Необязательно: установите, чтобы изменить аббревиатуры, рассматриваемые для имен Go
# go_initialisms:
#   replace_defaults: false # если true, стандартные аббревиатуры будут удалены в пользу новых
#   initialisms: # Список аббревиатур для имён Go
#     - 'CC'
#     - 'BCC'
# gqlgen будет искать любые имена типов в схеме в этих пакетах Go
# Если они совпадают, он будет использовать их, в противном случае он сгенерирует их.
autobind:
  - "dashboard-bl/internal/database/models"
# Этот раздел объявляет сопоставление типов между GraphQL и системами типов Go
#
# Первая строка в каждом типе будет использована по умолчанию для аргументов резолвера и
# modelgen, остальные будут разрешены при привязке к полям. Настройте их по своему усмотрению.
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  # gqlgen предоставляет удобную обертку UUID GraphQL по умолчанию для github.com/google/uuid
  # но вы можете переопределить это, чтобы предоставить собственную реализацию UUID GraphQL
  UUID:
    model:
      - github.com/99designs/gqlgen/graphql.UUID
  # Спецификация GraphQL явно указывает, что тип Int является знаковым 32-битным
  # целым числом. Использование Go int или int64 для его представления может привести к
  # неожиданному поведению, и некоторые инструменты GraphQL, такие как Apollo Router, завершат работу при
  # передаче чисел, которые переполняют 32 бита.
  #
  # Вы можете выбрать использование пользовательского встроенного скаляра Int64 для представления 64-битных
  # целых чисел или игнорировать спецификацию и привязать Int к graphql.Int / graphql.Int64
  # (поведение по умолчанию gqlgen). Это хорошо в простых случаях использования, когда вам
  # не нужно беспокоиться о совместимости и ожидаются только небольшие числа.
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int32
  Int64:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
  Time:
    model: github.com/99designs/gqlgen/graphql.Time